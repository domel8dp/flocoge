package pl.dpawlak.flocoge.generator;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

import com.sun.codemodel.JPackage;
import com.sun.codemodel.writer.FileCodeWriter;

public class HeaderCommentFileCodeWriter extends FileCodeWriter {

    private static final String HEADER1 =
        "/***************************************************************\n" +
        " *                                                             *\n" +
        " *                   DO NOT MODIFY THIS FILE                   *\n" +
        " *                                                             *\n" +
        " * This file was generated by the flocoge tool. Any changes in *\n" +
        " * this file will be lost on next file generation.             *\n";
    private static final int LINE_LENGTH = 64;
    private static final String HEADER2 = " * Generated by: flocoge-";
    private static final String HEADER3 = " * Generated on: ";
    private static final String HEADER4 = " ***************************************************************/\n";

    private final String version;
    private final String dateTime;

    public HeaderCommentFileCodeWriter(File target) throws IOException {
        super(target);
        version = getVersion();
        dateTime = getDateTime();
    }

    @Override
    public Writer openSource(JPackage pkg, String fileName) throws IOException {
        Writer writer = super.openSource(pkg, fileName);
        writer.write(HEADER1);
        writer.write(HEADER2);
        writer.write(version);
        completeLine(writer, HEADER2.length() + version.length());
        writer.write(HEADER3);
        writer.write(dateTime);
        completeLine(writer, HEADER3.length() + dateTime.length());
        writer.write(HEADER4);
        return writer;
    }

    private String getVersion() {
        String className = getClass().getSimpleName() + ".class";
        String classPath = getClass().getResource(className).toString();
        String manifestPath = classPath.substring(0, classPath.lastIndexOf("!") + 1) + "/META-INF/MANIFEST.MF";
        try (InputStream is = new URL(manifestPath).openStream()) {
            Manifest manifest = new Manifest(is);
            Attributes attr = manifest.getMainAttributes();
            return attr.getValue("Flocoge-Version");
        } catch (IOException unused) {
            return "unknown";
        }
    }

    private String getDateTime() {
        return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z").format(new Date());
    }

    private void completeLine(Writer writer, int length) throws IOException {
        for (int i = length + 1; i < LINE_LENGTH; i++) {
            writer.write(" ");
        }
        writer.write("*\n");
    }
}
